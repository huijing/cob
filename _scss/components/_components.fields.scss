// ==========
// FIELDS
// -----
// Let's wrap our fields in a field class for easier manipulation.
//
// Example:
// <div class="field">
//  <label for="field-name">Field name <sup>*<sup></label>
//  <input type="text" name="field-name" id="field-name" class="text-input" required />
// </div>
// ==========

.field {
  @include cf;
  position: relative;
  padding-bottom: rhythm(1);
}

// Treat checkbox fields slightly different
.field--check {
  label {
    @include cf;
  }
}

label,
.label {

}

// Add some error styling.
// Keeping the labels absolutely positioned prevents them from altering the layout when visible.
.error {
  color: red;
}

.label--error {
  position: absolute;
  left: 0;
  bottom: 0;
}

// Text inputs. Hat tip to Inuit for the text-input class idea. http://inuitcss.com/
//
// Instead of a `[type]` selector for each kind of form input, 
// we just use a class to target any/every one, e.g.:
// <input type="text" class="text-input" />
// <input type="email" class="text-input" />
// <input type="password" class="text-input" />

.text-input {
  -webkit-appearance: none;
  display:block;
  width: 100%;
  outline: none;
  border: $line-light;
  padding: rhythm(0.25);
  color: $text;
  &:hover,
  &:active,
  &:focus {
    border: $line-dark;
  }

  &.error {

  }
}

textarea {
  @extend .text-input;
  min-height: rhythm(1);
}

// Special styling for the search input
.search-input,
input[type=search] {
  @extend .text-input;
  overflow:hidden;
  box-sizing: border-box;

  &:focus,
  &:active {
    border: $line-dark;
  }
}

select {

}

input[type=file] {
  @extend .text-input;
}


// Labels in check-lists
.check-label,
.field--check label,
.field--check .label{
  display: inline-block;
}
.check-list {
  list-style: none;

  label {
    cursor: pointer;
  }
}
input[type=checkbox],
input[type=radio] {
  margin-right: 0.5em;
}


// Modified fields
.text-input--small {

}
.text-input--large {

}
